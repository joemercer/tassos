"use strict";angular.module("tassosApp",[]),angular.module("tassosApp").controller("MainCtrl",["$scope","Logging","CardsService",function(a,b,c){a.card={title:"What's your favorite song?",description:"",cardnumber:0},a.next=function(){a.card=c.get(),a.hasBeenRated=!1,b.log({type:"next_card_requested",cardNumber:a.card.cardnumber})},a.degrees=0,a.spin=function(){a.degrees+=360+720*Math.random(),(-45<(a.degrees-180)%360-360&&(a.degrees-180)%360-360<45||-45<(a.degrees-180)%360&&(a.degrees-180)%360<45)&&(a.degrees+=90),$(".spinner").css({"-webkit-transform":"rotate("+a.degrees+"deg)","-moz-transform":"rotate("+a.degrees+"deg)","-ms-transform":"rotate("+a.degrees+"deg)",transform:"rotate("+a.degrees+"deg)"})},a.hasBeenRated=!1,a.rateGood=function(){d()&&(b.log({type:"card_rated",cardNumber:a.card.cardnumber,cardRating:"Good"}),a.hasBeenRated=!0)},a.rateMeh=function(){d()&&(b.log({type:"card_rated",cardNumber:a.card.cardnumber,cardRating:"Meh"}),a.hasBeenRated=!0)},a.rateBad=function(){d()&&(b.log({type:"card_rated",cardNumber:a.card.cardnumber,cardRating:"Bad"}),a.hasBeenRated=!0)};var d=function(){return isFinite(a.card.cardnumber)};$(window).keyup(function(b){(13===b.which||32===b.which||39===b.which)&&(a.next(),a.$apply()),38===b.which&&(a.rateGood(),a.$apply()),40===b.which&&(a.rateBad(),a.$apply())})}]),angular.module("tassosApp").service("CardsService",function(){this.cards=[],this.current=0,this.get=function(){if(!this.cards.length)return{error:!0,message:"Loading cards... hold on"};var a=this.cards[this.current];return a?(this.current++,a):{error:!0,message:"Ran out of cards :(",title:"Last card!",description:"Reload the page if you dare to play again"}};var a="https://docs.google.com/spreadsheets/d/1uQLtqSJPecrQw1LZrLWVS9hSaJWGSOfkKHaVbTswtzM/pubhtml",b=a;Tabletop.init({key:b,simpleSheet:!0,parseNumbers:!0,callback:angular.bind(this,function(a){this.cards=a})})}),angular.module("tassosApp").service("Logging",function(){if(this.logger=null,this.backlog=[],this.userId=localStorage.getItem("tassos_user_id"),this.userId||(this.userId=Math.floor(1e4*Math.random()),localStorage.setItem("tassos_user_id",this.userId)),this.log=function(a){return a.timestamp=(new Date).getTime(),a.userId=this.userId,this.logger?void this.logger.insert(a):void this.backlog.push(a)},this.output=function(){return this.logger?void console.log(this.logger.query()):void console.log("no logger")},this.dropbox=new Dropbox.Client({key:"dg7kh1gl7wv9gj2",secret:"hp1rh6n8ia9fabr",token:"05PF-9qnGb8AAAAAAAAABEI3DKas5jHeRJcOMxH_U-I4a-JLcDkTS-ww3tTiEkWu"}),this.dropbox.isAuthenticated()){var a=this.dropbox.getDatastoreManager();a.openDefaultDatastore(angular.bind(this,function(a,b){a&&console.log("Error opening default datastore: "+a),this.logger=b.getTable("logs");for(var c=0;c<this.backlog.length;++c)this.logger.insert(this.backlog[c]);this.backlog=[]}))}});